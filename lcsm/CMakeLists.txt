PROJECT(LCSM LANGUAGES CXX VERSION 1.0.0)

ADD_LIBRARY(LCSM)

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src              LCSM_SOURCES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src/Model        LCSM_SOURCES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src/Model/std    LCSM_SOURCES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src/Physical     LCSM_SOURCES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src/Physical/std LCSM_SOURCES)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src/Verilog      LCSM_SOURCES)

SET(LCSM_HEADERS
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/LCSM.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/LCSMCircuit.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/LCSMEngine.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/LCSMState.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/Model/Circuit.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/Model/Identifier.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/Model/Width.h
    ${CMAKE_CURRENT_SOURCE_DIR}/include/lcsm/Model/Wire.h
)

TARGET_INCLUDE_DIRECTORIES(LCSM
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

TARGET_SOURCES(LCSM
    PRIVATE
        ${LCSM_SOURCES}
)

IF(BUILD_USE_SANITIZER)
    IF(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        TARGET_COMPILE_OPTIONS(LCSM PUBLIC /fsanitize=address)
        TARGET_COMPILE_DEFINITIONS(LCSM PUBLIC _DISABLE_STRING_ANNOTATION=1 _DISABLE_VECTOR_ANNOTATION=1)
    ELSE()
        TARGET_COMPILE_OPTIONS(LCSM PUBLIC -fsanitize=undefined,address)
        TARGET_LINK_OPTIONS(LCSM PUBLIC -fsanitize=undefined,address)
        TARGET_COMPILE_OPTIONS(LCSM PUBLIC -fno-sanitize-recover=all -fno-optimize-sibling-calls -fno-omit-frame-pointer)
    ENDIF()
ENDIF()

IF(MSVC)
    TARGET_COMPILE_OPTIONS(LCSM PRIVATE /W4)
    IF(BUILD_ENABLE_WERROR)
        TARGET_COMPILE_OPTIONS(LCSM PRIVATE /WX)
    ENDIF()
ELSE()
    TARGET_COMPILE_OPTIONS(LCSM PRIVATE -Wall -Wextra -Wpedantic)
    IF(BUILD_ENABLE_WERROR)
        TARGET_COMPILE_OPTIONS(LCSM PRIVATE -Werror)
    ENDIF()
ENDIF()

SET(LCSM_PUBLIC_HEADERS "${LCSM_HEADERS}")
SET_TARGET_PROPERTIES(LCSM PROPERTIES PUBLIC_HEADER "${LCSM_PUBLIC_HEADERS}")

FOREACH(header ${LCSM_PUBLIC_HEADERS})
    FILE(RELATIVE_PATH header_file_path "${CMAKE_CURRENT_SOURCE_DIR}/lcsm" "${header}")
    GET_FILENAME_COMPONENT(header_directory_path "${header_file_path}" DIRECTORY)
    INSTALL(
        FILES ${header}
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${header_directory_path}"
    )
ENDFOREACH()

INSTALL(TARGETS LCSM
    EXPORT "LCSMTargets"
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/lcsm
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# generate and install export file
INSTALL(EXPORT "LCSMTargets"
    FILE "LCSMTargets.cmake"
    NAMESPACE ${namespace}::
    DESTINATION cmake
)

# generate the version file for the config file
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/LCSMConfigVersion.cmake"
    VERSION "${version}"
    COMPATIBILITY AnyNewerVersion
)
# create config file
configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake.in
    "${CMAKE_CURRENT_BINARY_DIR}/LCSMConfig.cmake"
    INSTALL_DESTINATION cmake
)
# install config files
INSTALL(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/LCSMConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/LCSMConfigVersion.cmake"
    DESTINATION cmake
)

IF(LCSM_BUILD_TESTS)
    ADD_SUBDIRECTORY(test)
ENDIF()
