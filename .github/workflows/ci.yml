name: CI/CD

on: push

jobs:
  buildtest:
    name: Testing ${{ matrix.toolchain.name }} (with ${{ matrix.buildtype }} config, ${{ matrix.libtype.name }})

    strategy:
      fail-fast: false

      matrix:
        toolchain:
          - { name: Windows/MSVC 2019, runner: windows-2019, compiler: msvc-2019, cmake-generator: 'Visual Studio 16 2019' }
          - { name: Windows/MSVC 2022, runner: windows-2022, compiler: msvc-2022, cmake-generator: 'Visual Studio 17 2022' }
          - { name: Windows/Clang 18,  runner: windows-2022, compiler: clang-18,  cmake-generator: 'Ninja'                 }
          - { name: Windows/Clang 19,  runner: windows-2022, compiler: clang-19,  cmake-generator: 'Ninja'                 }
          - { name: Linux/GCC 13,      runner: ubuntu-24.04, compiler: gcc-13,    cmake-generator: 'Unix Makefiles'        }
          - { name: Linux/GCC 14,      runner: ubuntu-24.04, compiler: gcc-14,    cmake-generator: 'Unix Makefiles'        }
          - { name: Linux/Clang 18,    runner: ubuntu-24.04, compiler: clang-18,  cmake-generator: 'Unix Makefiles'        }
          - { name: Linux/Clang 19,    runner: ubuntu-24.04, compiler: clang-19,  cmake-generator: 'Unix Makefiles'        }

        buildtype:
          - Debug
          - Release

        libtype:
          - { name: shared, value: 'ON' }
          - { name: static, value: 'OFF' }

    runs-on: ${{ matrix.toolchain.runner }}
    env:
      LCSM_CMAKE_FLAGS: -D LCSM_BUILD_TESTS=ON -D BUILD_SHARED_LIBS=${{ matrix.libtype.value }}
      # TODO: In future, return '-D BUILD_ENABLE_WERROR=ON' back.
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Install C/C++ compiler
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          vcvarsall: ${{ contains(matrix.toolchain.compiler, 'msvc') }}
          cmake: true
          ninja: true
          make: ${{ matrix.toolchain.cmake-generator == 'Unix Makefiles' }}

#      - name: Install Icarus Verilog (Windows)
#        if: ${{ contains(matrix.toolchain.runner, 'windows') }}
#        run: choco install -y iverilog

#      - name: Install Icarus Verilog (Linux)
#        if: ${{ contains(matrix.toolchain.runner, 'ubuntu') }}
#        run: sudo apt-get install -y iverilog

      - name: Build
        run: |
          cmake . -G ${{ matrix.toolchain.cmake-generator }} -D CMAKE_BUILD_TYPE=${{ matrix.buildtype }} ${{ env.LCSM_CMAKE_FLAGS }}
          cmake --build . --config ${{ matrix.buildtype }} --parallel

      - name: Test (exclude Verilog)
        run: ctest -E "Verilog" -C ${{ matrix.buildtype }}

#      - name: Test (Verilog/MSVC)
#        if: ${{ contains(matrix.toolchain.compiler, 'msvc') }}
#        run: ./lcsm/test/src/userend/${{ matrix.buildtype }}/VerilogTest

#      - name: Test (Verilog/non MSVC)
#        if: ${{ !contains(matrix.toolchain.compiler, 'msvc') }}
#        run: ./lcsm/test/src/userend/VerilogTest
